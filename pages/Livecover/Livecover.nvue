<template>
 <!-- #ifdef APP-PLUS -->
	<view class="livecover" :style="{width:windowWidth+'px',height:windowHeight+'px'}">
		<!--这是直播推流组件 url-->
		<live-pusher 
			id='livePusher' 
			ref="livePusher"
			:url='url'
			mode="FHD"
			aspect="3:2"
			:muted="false"
			:enable-camera="true"
			:auto-focus="true"
			:min-bitrate="200"
			:max-bitrate="1000"
			:beauty="beauty"
			:whiteness="whiteness"
			orientation="vertical"
			audio-quality="high"
			device-position="front"
			:audio-reverb-type="1"
			:enable-mic="true"
			:enable-ans="true"
			audio-volume-type="media"
			local-mirror="enable"
			:style="{width:windowWidth+'px',height:windowHeight+'px'}"
			@netstatus="netstatus"
		>
		</live-pusher>
		<!-- 这是开播前的布局 -->
		<cover-view 
			class="coverfather" 
			:style="{width:windowWidth+'px',height:windowHeight+'px','padding-top':statusBarHeight+'px'}"
			v-if="Broadcastlivestate==false"
		>
			<!-- <livecovetop></livecovetop> -->
			<cover-view class="livecovetop">
				<cover-view class="livecovetop-left">
					<cover-view class="icon iconmargin" v-for="(item,index) in righticon" :key="index" :data-index="index" @click="cameraimgs">
						<cover-image class="icon-imgs" :src="item.url"></cover-image>
					</cover-view>
				</cover-view>
				<cover-view class="livecovetop-right" @click="Shutdown">
					<cover-image src="/static/Pushflow/cha.png" class="icon-imgs"></cover-image>
				</cover-view>
			</cover-view>
			<livecovemidden :windowWidth="windowWidth" @coverurl="coverurl" @inpvalue="inpvalue" @nickname="nickname"></livecovemidden>
			<!-- 上面的两个组件最后给父组件 把接下来的按钮留给父组件 这样就能少了一步传值 -->
			<cover-view class="livecover-bottom parent-padding-leftAndright" :style="{width:windowWidth+'px','padding-bottom':(windowBottom+5)+'px'}">
				<!-- <cover-view class="location">
					<cover-image class="locationicon icon" src="/static/Pushflow/location.png"></cover-image>
					<text class="locationicontext textcolorwrite font-size-thirty">德州市</text>
				</cover-view> -->
				<!-- 这是直播的按钮 -->
				<button class="livecover-btn border-radiusOnehundred bg-btn-red" @tap="Begintolive">
					<text class="textcolorwrite text-weight">开始直播</text>
				</button>
			</cover-view>
			<cover-view class="slider" :style="{top:(windowHeight/2)+'px'}"  v-if="Skincare">
				<text class="textcolorwrite font-size-thirty slidertitletext">美颜</text>
				<button class="sliderbtn bg-btn-red" @click="Increaseskin" data-indextext="1">
					<text class="textcolorwrite font-size-forty">+</text>
				</button>
				<input type="text" class="sliderinp textcolorwrite text-center font-size-thirty border-styles border-Size" v-model="beauty" :disabled="true" />
				<button class="sliderbtn bg-btn-red textcolorwrite" @click="Reduceskin" data-indextext="1">
					<text class="textcolorwrite font-size-forty">-</text>
				</button>
			</cover-view>
			<cover-view class="slider" :style="{top:(windowHeight/2)+'px',right:0}" v-if="Skincare">
				<text class="textcolorwrite font-size-thirty slidertitletext">美白</text>
				<button class="sliderbtn bg-btn-red" @click="Increaseskin" data-indextext="2">
					<text class="textcolorwrite font-size-forty">+</text>
				</button>
				<input type="text" class="sliderinp textcolorwrite text-center font-size-thirty border-styles border-Size" v-model="whiteness" :disabled="true" />
				<button class="sliderbtn bg-btn-red textcolorwrite" @click="Reduceskin" data-indextext="2">
					<text class="textcolorwrite font-size-forty">-</text>
				</button>
			</cover-view>
		</cover-view>
		
		<!-- 这是直播后的布局 -->
		<cover-view 
			class="coverfather" 
			:style="{width:windowWidth+'px',height:windowHeight+'px','padding-top':statusBarHeight+'px'}"
			@click="Removeevent"
			v-if="Broadcastlivestate"
		>
			<cover-view class="coverfather-top" :style="{width:windowWidth+'px',height:(windowHeight/2)+'px'}">
				<liveroomtopinfo :cont="cont" :Focusshow="false" :room_id="room_id" :live_nick="livenickname" :live_pic="Backcoverurl"></liveroomtopinfo>
			</cover-view>
			<!-- 这是商品列表 -->
			<livemiddengoodshoplist 
				:componentheight="windowHeight" 
				:componentwidth="windowWidth" 
				paddingbottom="50" 
				v-if="shopbool" 
				:Immediatelygrabbool="false"
			></livemiddengoodshoplist>
			<cover-view class="coverfather-bottom" :style="{width:windowWidth+'px',height:(windowHeight/2)+'px','padding-bottom':(windowBottom+40)+'px'}">
				<conver-view class="coverfather-bottom-bottomlist">
					<cover-view class="bottomevent parent-padding-leftAndright" :class="inpbool?'bottomeventcolor':'bottomeventweicolor'">
						<cover-view class="bottomevent-imgs" v-if="inpbool==false">
							<cover-image src="/static/liveplatfrom/car.png" class="bottomevent-img" @tap="zhiboshop"></cover-image>
						</cover-view>
						<cover-view class="inp" :class="inpbool?'inpflex':'inpwidth'">
							<input type="text" v-model="inptvalue" @focus="focusinp" @blur="blurinp" placeholder="主播暂不能发消息" class="font-size-thirty textcolorwrite inptext" :class="inpbool?'textcolor-black':'textcolorwrite'" :disabled="true"></input>
						</cover-view>
						<!-- <cover-view class="share" @click="share" v-if="inpbool==false">
							<cover-image src="/static/Pushflow/fenxiang.png" class="shareimgs"></cover-image>
						</cover-view> -->
						<cover-view class="share" @click="Closeby" v-if="inpbool==false">
							<cover-image src="/static/Pushflow/Closeby.png" class="shareimgs"></cover-image>
						</cover-view>
						<cover-view class="btn"  v-if="inpbool==true">
							<button class="button" @click="btnsend">发送</button>
						</cover-view>
					</cover-view>
				</conver-view>
				<cover-view class="coverfather-bottom-toplist">
					<livechatlist :componentwidth="windowWidth" :list="list"></livechatlist>
				</cover-view>
				<!-- 这是直播中进入其他用户的时候 -->
				<cover-view class="MidwaypromptBox" :style="{width:windowWidth+'px'}" v-if="midway">
					<cover-view class="Midwayprompt border-radiusthirty" :style="{width:(windowWidth/2)+'px',transform:'translateX('+displacement+'%)'}">
						<text class="textcolorwrite Midwayprompttext">{{midwayname}}&nbsp;来了</text>
					</cover-view>
				</cover-view>
			</cover-view>
		</cover-view>
	</view>
	<!-- #endif -->
</template>

<script>
	// #ifdef APP-PLUS
	// import livecovetop from "@/components/Livecoverfengmian/livecovetop.nvue" 
	import livecovemidden from "@/components/Livecoverfengmian/livecovemidden.nvue"
	import liveroomtopinfo from "@/components/liveplice/liveroomtopinfo.nvue"
	import livemiddengoodshoplist from "@/components/livemiddencomponent/livemiddengoodshoplist.nvue"
	import livechatlist from "@/components/liveplice/livechatlist.nvue"
	const app = getApp()
	export default {//这是直播的封面
		data() {
			return {
				windowWidth:0,//可使用屏幕的宽度
				windowHeight:0,//克数用屏幕的高度
				beauty:5,//美颜，取值范围 0-9（iOS取值范围为1） ，0 表示关闭
				whiteness:5,//	美白，取值范围 0-9（iOS取值范围为1） ，0 表示关闭。
				statusBarHeight:0,//拿到状态栏高度
				windowBottom:0,//距离底部的距离
				Backcoverurl:"",//这是传回来的图片
				Backinpvalue:"",//这是穿回来的value
				righticon:[
					{
						url:"/static/Pushflow/Skincare.png"
					},
					{
						url:"/static/Pushflow/Cameratransformation.png"
					}
				],
				Skincare:false,
				// 临时变量
				indexlinshi:0,
				// storeid:"",//为了获得店铺id
				tokey:"",//用户的tokey
				livenickname:"",//用户直播的昵称
				url:"",
				room_id:"",
				shopbool:false,
				list:[],
				Broadcastlivestate:false,
				inpbool:false,//控制发送按钮是否显示
				inptvalue:"",//获取inp的内容
				webtime:null,//websoket的定时器
				uid:"",//用户的user
				cont:0,
				liveflowbool:false,
				displacement:0,//一会 位移
				midway:false,//判断用户是不是中途进来的 要不要显示中间dom结构
				midwayname:"",//谁(名字)进入了当前的直播间
				Nonetwork:null,//没网的状态
				// Nonetworkbool:false//没网的情况的下 布尔值
				startDate:"",//开始时间
				Enddata:"",//结束时间
			}
		},
		methods: {
			// 这是转移过来的----开始
			//当获取焦点的时候
			focusinp(){
				this.inpbool = true
			},
			//当失去焦点的时候
			blurinp(){
				this.inpbool = false
				// console.log("当键盘弹起或收起的时候触发")
			},
			//当用户点击发送的时候
			btnsend(){
				const _this = this
				
				let livesendobj = {
					type: 'liveChatMessage',
					data:{
						to_id:"",
						to_name:"",
						to_group:_this.room_id,
						content:_this.inptvalue,
						from_name:_this.livenickname,
						from_id:_this.uid,
						from_avatar:_this.$store.state.imgyuming+_this.Backcoverurl
					}
				}
				// console.log(JSON.stringify(livesendobj))
				uni.sendSocketMessage({
					data:JSON.stringify(livesendobj),
					success(ressend){
						// console.log(ressend)
						let obj = {
							name:_this.livenickname,
							content:_this.inptvalue
						}
						_this.$store.commit("livereceivemsg",{msg:obj})
						_this.inptvalue = ""
					}
				})
			},
			Removeevent(){
				if(this.shopbool){
					this.shopbool = false
					return 
				}
			},
			zhiboshop(e){
				e.stopPropagation()
				this.shopbool = true
			},
			share(){
				// uni.shareWithSystem({
				// 	type:"image",
				// 	href:"https://uniapp.dcloud.io",
				// 	imageUrl:"/static/logo.png"
				// })
				uni.share({
					provider:"weixin",
					type:2,
					title:"正在测试分享",
					scene:"WXSceneSession",
					summary:"我正在测试分享",
					imageUrl:"/static/logo.png",
					success(res){
						// console.log(res,"成功")
					},
					fail(err){
						// console.log(err,"失败")
					}
				})
			},
			netstatus(e){
				// console.log(JSON.stringify(e))
			},
			Closeby(){
				const _this = this
				//取消预加载
				// uni.unPreloadPage()
				//点击关播 先把摄像头停止推流
				// console.log(_this.tokey,_this.livenickname,_this.Backcoverurl,"这是关播的时候")
				let closeobj = {
					type:'anchorCloseRoom',
					uid:_this.uid,
					name:_this.livenickname,
					group:_this.room_id
				}
				if(_this.liveflowbool){
					// console.log("当前的状态为true")
					uni.request({
						url:`${app.globalData.Requestpath}live_user/updateLiveUserInfo`,
						method:"POST",
						data:{
							token:_this.tokey,
							live_nick:_this.livenickname,
							live_pic:_this.Backcoverurl,
							is_living:0
						},
						success(resclose) {
							if(resclose.data.code==0){
								_this.context.stop()
								
								_this.context.stopPreview({
									success(e){
										// console.log("关闭摄像头成功",JSON.stringify(e))
									},
									fail(err){
										// console.log("关闭失败")
									}
								})
								//关闭直播前要给后端发送个消息
								uni.sendSocketMessage({
									data:JSON.stringify(closeobj),
									success(res) {
										// console.log("关闭前发送的消息",res)
									}
								})
								//关闭连接
								uni.closeSocket({
									code:1000,
									success(reswebclose) {
										// startDate:"",//开始时间
										// Enddata:"",//结束时间
										// console.log(reswebclose)
										clearInterval(_this.webtime)
										_this.$store.state.liveuserlist = []
										let endTime = new Date().getTime()
										//将毫秒转成秒
										let endtime = Math.floor((endTime - _this.startDate)/1000)
										//将秒转转成分钟
										let endmin = Number(endtime/60).toFixed(2)
										// console.log(parseFloat(Number(endtime/60)))
										uni.redirectTo({
											url:`/pages/Closeby/Closeby?livendmin=${endmin}&livenickname=${_this.livenickname}`
										})
										_this.liveflowbool = false
									}
								})
							}
						}
					})
				}else{
					console.log("当前的状态为false")
					uni.closeSocket({
						code:1000,
						success(reswebclose) {
							// console.log(reswebclose)
							_this.$store.state.liveuserlist = []
							_this.liveflowbool = false
						}
					})
				}
			},
			//这是转移过来的----结束
			dianji(e){
				e.stopPropagation()
			},
			cameraimgs(e){
				let indexs = e.currentTarget.dataset.index
				// console.log(indexs)
				if(indexs==0){//代表点击了美颜
					if(this.Skincare){
						this.Skincare = false
					}else{
						this.Skincare = true
					}
				}else{
					//切换前后摄像头
					this.context.switchCamera()
				}
			},
			// covermodel(msgtitle,msgcotent){
			// 	const _this = this
			// 	uni.showModal({
			// 		title:msgtitle,
			// 		content:msgcotent,
			// 		showCancel:true,
			// 		cancelText:"稍后直播",
			// 		cancelColor:"#f00",
			// 		confirmText:"继续直播",
			// 		confirmColor:"#0f0",
			// 		success(res){
			// 			if(res.confirm){
			// 				//关闭摄像头预览
			// 				_this.context.stopPreview()
			// 				//开启推流
			// 				// _this.context.start()
			// 				// 后面添加参数的是临时的
			// 				_this.getliveinforoom()
			// 			}
			// 		}
			// 	})
			// },
			//封装一个执行上面的模态框的方法
			Detectionlive(_this){
				if(_this.Backcoverurl!=="" && _this.Backinpvalue!=="" && _this.livenickname!==""){//如果两个值不为空的情况下
					//关闭摄像头预览
					// _this.context.stopPreview()
					//开启推流
					// _this.context.start()
					//这里为了保存 用户开直播的信息
					// console.log(_this.tokey)
					_this.getliveinforoom()
				}else if(_this.Backcoverurl==""){//如果图片的为空
					// _this.covermodel('封面图片未选择',"为了让其他人更好的关注您,请设置封面图片")
					app.globalData.showtoastsame("封面图片未选择")
					return 
				}else if(_this.Backinpvalue==""){//如果描述为空的情况下
					// _this.covermodel("标题未填写","为了让其他人更好的关注您,请填写标题")
					app.globalData.showtoastsame("标题未填写")
					return
				}else if(_this.livenickname==""){
					// _this.covermodel("昵称未填写","为了让其他人更好的关注您,请填写昵称")
					app.globalData.showtoastsame("昵称未填写")
					return 
				}
			},
			//开始直播
			Begintolive(){
				const _this = this
				uni.getNetworkType({
					success(res) {
						if(res.networkType!=="wifi" && res.networkType!=="none"){//判断用户在不在wifi情况下 并且判断用户的网不在none的情况下
							uni.showModal({
								title:`您正在使用${res.networkType}网`,
								content:"确定要继续直播吗",
								showCancel:true,
								cancelText:"稍后直播",
								cancelColor:"#f00",
								confirmText:"继续直播",
								confirmColor:"#0f0",
								success(reslut) {
									if(reslut.confirm){//如果用户选择了继续播放 
										_this.Detectionlive(_this)
									}
								}
							})
						}else if(res.networkType=="none"){//如果是在美网的情况下
							app.globalData.showtoastsame("网络连接失败,请检查您的网络")
						}else{
							_this.Detectionlive(_this)
						}
					},
					fail(err){
						
					}
				})
				
			},
			//点击×的时候
			Shutdown(){
				uni.navigateBack()
			},
			//封装个方法 用于请求后台的信息 保存直播间
			getliveinforoom(){
				const _this = this
				uni.getStorage({
					key:"bindtokey",
					success(restokey) {
						_this.tokey = restokey.data
						// console.log(_this.tokey,_this.livenickname,_this.Backcoverurl,_this.Backinpvalue,"这是最后要更改的值")
						uni.request({
							url:`${app.globalData.Requestpath}live_user/updateLiveUserInfo`,
							method:"POST",
							data:{
								token:restokey.data,
								live_nick:_this.livenickname,
								live_pic:_this.Backcoverurl,
								live_desc:_this.Backinpvalue,
								is_living:1
							},
							success(res) {
								// console.log(res)
								if(res.data.code==0){
									uni.request({
										url:`${app.globalData.Requestpath}live_user/getLiveUserInfo`,
										method:"POST",
										data:{
											token:restokey.data
										},
										success(resinfo) {
											// console.log(resinfo)
											if(resinfo.data.code==0){
												// console.log("已经进来了")
												let {live_url,room_id,live_nick,live_pic} = resinfo.data.data
												// console.log(live_url,room_id,live_nick,live_pic)
												_this.uid = resinfo.data.data.user_id
												_this.url = live_url
												_this.room_id = room_id
												_this.livenickname = live_nick
												_this.Backcoverurl = live_pic
												_this.Broadcastlivestate = true
												// uni.redirectTo({
												// 	// 后面添加参数的是临时的
												// 	url:`/pages/livestudio/livestudio?storeid=${_this.storeid}&index=${_this.indexlinshi}&beauty=${_this.beauty}&whiteness=${_this.whiteness}&url=${live_url}&roomid=${room_id}&livenick=${live_nick}&livepic=${live_pic}`
												// })
												//创建websoket的
												// console.log(_this.uid,_this.livenickname)
												// ws://49.232.153.178:7272
												uni.connectSocket({
													url:"ws://49.232.153.178:7272",
													// #ifdef MP
													header: {
														'content-type': 'application/json'
													},
													// #endif
													// #ifdef MP-WEIXIN
													method: 'GET',
													// #endif
													success(resSocket) {
														// console.log(resSocket)
														let liveobj = {
															type: 'anchorInit',
															uid:_this.uid,
															name:_this.livenickname,
															avatar:'',
															group:room_id,
														}
														// console.log(JSON.stringify(liveobj))
														setTimeout(()=>{
															uni.sendSocketMessage({
																data:JSON.stringify(liveobj),
																success(res) {
																	// console.log(res)
																	//当用户开始直播的时候  记录直播的开始的时间
																	_this.startDate = new Date().getTime()
																},
																fail(err){
																	_this.startDate = new Date().getTime()
																	_this.$store.state.liveuserlist = []
																	let endTime = new Date().getTime()
																	//将毫秒转成秒
																	let endtime = Math.floor((endTime - _this.startDate)/1000)
																	//将秒转转成分钟
																	let endmin = Number(endtime/60).toFixed(2)
																	// console.log(parseFloat(Number(endtime/60)))
																	uni.redirectTo({
																		url:`/pages/Closeby/Closeby?livendmin=${endmin}&livenickname=${_this.livenickname}`
																	})
																	_this.liveflowbool = false
																}
															})
														},3000)
														
													},
													fail(err){
														// console.log(err)
													}
												})
												
												//临时的
												//这是开始推流
												setTimeout(()=>{
													_this.context.start()
													_this.liveflowbool = true
													// console.log(_this.context)
												},3000)
												
											}else{
												app.globalData.showtoastsame("请前往设置开通")
											}
										}
									})
								}
							}
						})
					}
				})
			},
			//这是子组件穿回来的值
			coverurl(e){
				this.Backcoverurl = e
				// console.log(this.Backcoverurl)
			},
			inpvalue(e){
				this.Backinpvalue = e
			},
			nickname(e){
				// console.log(e)
				this.livenickname = e
				// console.log(this.livenickname)
			},
			//增加美颜
			Increaseskin(e){
				let indexs = parseInt( e.currentTarget.dataset.indextext)
				if(indexs==1){//代表美颜
					this.beauty++
					if(this.beauty>=9){
						this.beauty = 9
						app.globalData.showtoastsame("美颜取值0~9,9代表最高美颜")
					}
				}else{//代表美白
					this.whiteness++
					if(this.whiteness>=9){
						this.whiteness = 9
						app.globalData.showtoastsame("美白取值0~9,9代表最高美白")
					}
				}
			},
			//减少美颜
			Reduceskin(e){
				let indexs = parseInt( e.currentTarget.dataset.indextext)
				if(indexs==1){//代表美颜
					this.beauty--
					if(this.beauty<=0){
						this.beauty = 0
						app.globalData.showtoastsame("美颜取值0~9,0代表无美颜")
					}
				}else{//代表美白
					this.whiteness--
					if(this.whiteness<=0){
						this.whiteness = 0
						app.globalData.showtoastsame("美白取值0~9,0代表无美白")
					}
				}
			}
		},
		created() {
			// console.log(111)
			const _this = this
			uni.getSystemInfo({
				success(res) {
					_this.statusBarHeight = res.statusBarHeight
					_this.windowWidth = res.screenWidth
					_this.windowHeight = res.screenHeight
					_this.windowBottom = res.windowBottom
				}
			})
			//把头像在缓存中取出来
			// uni.getStorage({
			// 	key:"userportrait",
			// 	success(res) {
			// 		console.log(res,"头像")
					
			// 	}
			// })
			//这是获取位置
			// uni.getLocation({
			// 	success(res) {
			// 		// console.log(res)
			// 		 uni.openLocation({
			// 			 latitude:res.latitude,
			// 			 longitude:res.longitude,
			// 			 success(reslocationicon) {
			// 			 	console.log(reslocationicon)
			// 			 }
			// 		 })
			// 	}
			// })
			// _this.getliveinforoom()
		},
		onShow(){
			
		},
		onReady(){
			this.context = uni.createLivePusherContext("livePusher", this);
			// console.log(this.context)
			// console.log(this.context)
			//开启推流
			// this.context.start()
			//开启摄像头预览
			this.context.startPreview()
			
		},
		components:{
			livecovemidden,
			liveroomtopinfo,
			livemiddengoodshoplist,
			livechatlist
		},
		onLoad(opction) {
			const _this = this
			_this.$store.commit("getliveshoplist")
			// let {storeid} = opction
			// _this.storeid = storeid
			// 监听WebSocket连接打开事件。
			uni.onSocketOpen((res)=>{
				let pingobj = {
					type:'livePing'
				}
				_this.webtime = setInterval(function(){
					uni.sendSocketMessage({
						data:JSON.stringify(pingobj),
						success(res){
							// console.log(res)
						},
						fail(err){
							// console.log(err)
						}
					})
					
					
				},30000)
				
			})
			//监听网络的状态
			uni.onNetworkStatusChange(function(res){
				// console.log(_this.Nonetwork)
				_this.liveflowbool = false
				_this.context.pause(function(res){
					// console.log("暂停推流成功",res)
				},function(err){
					// console.log("暂停推流失败",err)
				})
				//当用户网络发生变化的时候 如果之前的定时器有值的话 就先清除定时器
				if(_this.Nonetwork!==null && _this.Nonetwork!==undefined){
					// console.log("清除成功")
					clearTimeout(_this.Nonetwork)
				}
				if(_this.webtime!==null && _this.webtime!==undefined){
					clearInterval(_this.webtime)
				}
				_this.Closeby()
				
				//当前是否有网络连接
				let Connected = res.isConnected
				//网络类型
				let Type = res.networkType
				_this.Nonetwork = setTimeout(()=>{
					if(Type=='none'){
						//当用户网络发生变化的时候 15秒钟当前的定时器  还是没网的情况下 只能直播间关闭了
						_this.liveflowbool = true
						_this.Closeby()
						
					}else{
						//当用户网络发生变化的时候 如果当前的定时器 在有网的状态下 就继续推流
						_this.context.resume(function(res){
							// console.log(res,"继续成功")
						},function(err){
							// console.log(err,"继续失败")
						})
						uni.connectSocket({
							url:"ws://49.232.153.178:7272",
							// #ifdef MP
							header: {
								'content-type': 'application/json'
							},
							// #endif
							// #ifdef MP-WEIXIN
							method: 'GET',
							// #endif
							success(resSocket) {
								// console.log(resSocket)
								_this.liveflowbool = true
							},
							fail(err){
								// console.log(err)
							}
						})
					}
					//不管上面的哪种情况 都会清除当前的定时器
					clearTimeout(_this.Nonetwork)
					_this.Nonetwork==null
				},10000)
			})
			
			//监听服务端发来的消息
			uni.onSocketMessage(function(res){
				let colorarr = ["#ed5565","#da4453","#fc6451","#e9573f","#ffce54","#f6bb42","#a0d468","#8cc152","#48cfad","#37bc98","#4fc1e9","#3bafda","#5d9cec","#4a89dc","#ac92ec","#967adc","#ec87c0","#d770ad"];
				// console.log(JSON.parse(res.data))
				let messagetype = JSON.parse(res.data).message_type
				if(messagetype=="zb_online"){
					//初始化 主播已上线
				}else if(messagetype=="userLeaveRoom"){
					//有用户退出直播间的时候 主播收到的消息
				}else if(messagetype=="liveConnect"){
					//当用户加入到直播间的时候返回的消息
					//这是获取直播间的人数
					_this.cont = JSON.parse(res.data).data.count
					//这是获取 谁进入了当前的直播间
					//开始的时候先清0
					_this.displacement = 0
					_this.midwayname = JSON.parse(res.data).data.user_name
					_this.midway = true
					let time = null
					time = setInterval(()=>{
						_this.displacement +=5
						if(_this.displacement==100){
							clearInterval(time)
							_this.midway = false
						}
					},130)
				}else if(messagetype=="liveChatMessage"){
					let livetextcolor = colorarr[parseInt(Math.random()*colorarr.length)]
					let obj = JSON.parse(res.data).data
					obj.livetextcolor = livetextcolor
					_this.$store.commit("livereceivemsg",{msg:obj})
					
				}else if(messagetype=="close_current_client"){
					//当直播地址被占用的时候 直接让主播跳到关闭直播的页面
					_this.$store.state.liveuserlist = []
					uni.redirectTo({
						url:"/pages/Closeby/Closeby"
					})
				}else if(messagetype=="uid_empty"){
					uni.showModal({
						title:"连接错误",
						content:"请退出重进",
						showCancel:false,
						confirmText:"确定退出",
						confirmColor:"#00ff00",
						success(res){
							if(_this.liveflowbool){
								_this.Closeby()
							}else{
								uni.closeSocket({
									code:1000,
									success(reswebclose) {
										// console.log(reswebclose)
										_this.$store.state.liveuserlist = []
										_this.liveflowbool = false
										uni.navigateBack()
									}
								})
							}
						}
					})
				}
			})
			uni.onSocketClose(function(res){
				// console.log(res)
				let closeobj = {
					type:'anchorCloseRoom',
					uid:_this.uid,
					name:_this.livenickname,
					group:_this.room_id
				}
				uni.getStorage({
					key:"bindtokey",
					success(restokey) {
						uni.request({
							url:`${app.globalData.Requestpath}live_user/updateLiveUserInfo`,
							method:"POST",
							data:{
								token:restokey.data,
								live_nick:_this.livenickname,
								live_pic:_this.Backcoverurl,
								is_living:0
							},
							success(resclose) {
								if(resclose.data.code==0){
									_this.context.stop()
									
									_this.context.stopPreview({
										success(e){
											// console.log("关闭摄像头成功",JSON.stringify(e))
										},
										fail(err){
											// console.log("关闭失败")
										}
									})
									clearInterval(_this.webtime)
									_this.$store.state.liveuserlist = []
									let endTime = new Date().getTime()
									//将毫秒转成秒
									let endtime = Math.floor((endTime - _this.startDate)/1000)
									//将秒转转成分钟
									let endmin = Number(endtime/60).toFixed(2)
									// console.log(parseFloat(Number(endtime/60)))
									uni.redirectTo({
										url:`/pages/Closeby/Closeby?livendmin=${endmin}&livenickname=${_this.livenickname}`
									})
									_this.liveflowbool = false
								}
							}
						})
					}
				})
				
			})
		},
		//当用户不小心点击了系统的返回键的时候
		onBackPress(e){
			if(e.from=='backbutton'){
				this.Closeby()
			}
		},
		//当页面隐藏的时候 
		onHide(){
			// console.log("当页面隐藏时候",this.liveflowbool)
			if(this.liveflowbool){
				// console.log(1111)
				this.context.resume()
			}
		}
	}
	// #endif
</script>

<style>
	/* #ifdef APP-PLUS */
.livecover{
	/* background-color:yellow; */
}
.coverfather{
	position: absolute;
	top:0;
	left:0;
	/* background-color:red; */
}
.livecovetop{
	/* height:30px; */
	/* background-color:red; */
	flex-direction: row;
	padding:0 40rpx;
}
.livecovetop-left{
	flex:1;
	flex-direction: row;
	/* background-color:pink; */
}
.livecovetop-right{
	width: 60rpx;
	/* background-color:yellow; */
}
.icon-imgs{
	width: 60rpx;
	height:60rpx;
}
.iconmargin{
	margin-right:40rpx;
}
.iconmargin:last-child{
	margin-right:0;
}
.livecover-bottom{
	position: absolute;
	bottom:0;
	left:0;
	/* width: 100px; */
	height:100px;
	/* background-color:red; */
	justify-content: center;
}
.location{
	flex-direction: row;
}
.locationicon{
	/* background-color:yellow; */
}
.locationicontext{
	margin:10rpx 0 0 10rpx;
}
.livecover-btn{
	height:110rpx;
	border-width:0;
}
.slider{
	align-items: center;
	position: absolute;
	width: 100rpx;
	/* height:60rpx; */
	/* background-color:red; */
	justify-content: center;
}
.slidertitletext{
	margin-bottom:10rpx;
}
.sliderbtn{
	width:80rpx;
	height:50rpx;
	border-width:0;
	border-radius: 20rpx;
}
.sliderinp{
	width: 100rpx;
	height:40rpx;
	border-color:#de4758;
	margin:15rpx 0;
	border-radius:20rpx;
}
	
	
/* 这是直播的样式 */
.coverfather{
	position: absolute;
	top:0;
	left:0;
	/* background-color:red; */
}
.coverfather-top{
	/* background-color:#f00; */
}
.coverfather-bottom{
	flex-direction:column-reverse;
}
.coverfather-bottom-toplist{
	/* background-color:pink; */
	margin-bottom:20rpx;
}
.bottomevent{
	justify-content: space-between;
	flex-direction:row;
	align-items: flex-end;
	/* height:20px; */
	/* background-color: yellow; */
}
.bottomevent-imgs{
	width: 70rpx;
	/* height:80rpx; */
	/* background-color:red; */
}
.bottomevent-img{
	width: 70rpx;
	height:80rpx;
	/* background-color:blue; */
}
.bottomeventweicolor{
	background-color:transparent;
}
.bottomeventcolor{
	background-color:#fff;
}
.inp{
	/* width:300rpx; */
	height:70rpx;
	/* background-color:red; */
	justify-content: flex-end;
}
.inptext{
	height:70rpx;
	/* line-height: */
}
.inpwidth{
	width: 300rpx;
}
.inpflex{
	flex:0.8;
}
.btn{
	flex:0.2;
	background-color:green;
	height:70rpx;
	/* line-height:70rpx; */
}
.button{
	height:70rpx;
	line-height:70rpx;
	border-radius:0;
	border-width: 0;
}
.share{
	width: 60rpx;
	height:60rpx;
	/* background-color:green; */
}
.shareimgs{
	position: relative;
	width: 60rpx;
	height:60rpx;
}
.report{
	position: absolute;
	top:0px;
	left:0;
	width: 70rpx;
	height:70rpx;
	background-color:yellow;
	border-radius: 15px;
}
.reporttext{
	line-height:70rpx;
}
/* 中途进来的人进来的样式 */
.MidwaypromptBox{
	/* height:100rpx; */
	/* background-color:green; */
}
.Midwayprompt{
	/* height:100rpx; */
	/* background-color:red; */
	background-image:linear-gradient(to right,#e53951,rgba(255,255,255,.6));
	padding:5rpx 10rpx;
	transition-duration:.8s;
	transition-timing-function: linear;
}
.Midwayprompttext{
	font-size:35rpx;
}
/* #endif */
</style>
