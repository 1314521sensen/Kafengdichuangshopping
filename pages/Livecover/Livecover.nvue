<template>
 <!-- #ifdef APP-PLUS -->
	<view class="livecover" :style="{width:windowWidth+'px',height:windowHeight+'px'}">
		<!--这是直播推流组件 -->
		<live-pusher 
			id='livePusher' 
			ref="livePusher"
			url=""
			mode="SD"
			aspect="3:2"
			:muted="false"
			:enable-camera="true"
			:auto-focus="true"
			:beauty="beauty"
			:whiteness="whiteness"
			orientation="vertical"
			audio-quality="high"
			device-position="front"
			:audio-reverb-type="1"
			:enable-mic="true"
			:enable-ans="true"
			audio-volume-type="media"
			local-mirror="enable"
			:style="{width:windowWidth+'px',height:windowHeight+'px'}"
		>
			
		</live-pusher>
		<cover-view class="coverfather" :style="{width:windowWidth+'px',height:windowHeight+'px','padding-top':statusBarHeight+'px'}">
			<!-- <livecovetop></livecovetop> -->
			<cover-view class="livecovetop">
				<cover-view class="livecovetop-left">
					<cover-view class="icon iconmargin" v-for="(item,index) in righticon" :key="index" :data-index="index" @click="cameraimgs">
						<cover-image class="icon-imgs" :src="item.url"></cover-image>
					</cover-view>
				</cover-view>
				<cover-view class="livecovetop-right" @click="Shutdown">
					<cover-image src="/static/Pushflow/cha.png" class="icon-imgs"></cover-image>
				</cover-view>
			</cover-view>
			<livecovemidden :windowWidth="windowWidth" @coverurl="coverurl" @inpvalue="inpvalue"></livecovemidden>
			<!-- 上面的两个组件最后给父组件 把接下来的按钮留给父组件 这样就能少了一步传值 -->
			<cover-view class="livecover-bottom parent-padding-leftAndright" :style="{width:windowWidth+'px','padding-bottom':(windowBottom+5)+'px'}">
				<!-- <cover-view class="location">
					<cover-image class="locationicon icon" src="/static/Pushflow/location.png"></cover-image>
					<text class="locationicontext textcolorwrite font-size-thirty">德州市</text>
				</cover-view> -->
				<!-- 这是直播的按钮 -->
				<button class="livecover-btn border-radiusOnehundred bg-btn-red" @tap="Begintolive">
					<text class="textcolorwrite text-weight">开始直播</text>
				</button>
			</cover-view>
			<cover-view class="slider" :style="{top:(windowHeight/2)+'px'}"  v-if="Skincare">
				<text class="textcolorwrite font-size-thirty slidertitletext">美颜</text>
				<button class="sliderbtn bg-btn-red" @click="Increaseskin" data-indextext="1">
					<text class="textcolorwrite font-size-forty">+</text>
				</button>
				<input type="text" class="sliderinp textcolorwrite text-center font-size-thirty border-styles border-Size" v-model="beauty" :disabled="true" />
				<button class="sliderbtn bg-btn-red textcolorwrite" @click="Reduceskin" data-indextext="1">
					<text class="textcolorwrite font-size-forty">-</text>
				</button>
			</cover-view>
			<cover-view class="slider" :style="{top:(windowHeight/2)+'px',right:0}" v-if="Skincare">
				<text class="textcolorwrite font-size-thirty slidertitletext">美白</text>
				<button class="sliderbtn bg-btn-red" @click="Increaseskin" data-indextext="2">
					<text class="textcolorwrite font-size-forty">+</text>
				</button>
				<input type="text" class="sliderinp textcolorwrite text-center font-size-thirty border-styles border-Size" v-model="whiteness" :disabled="true" />
				<button class="sliderbtn bg-btn-red textcolorwrite" @click="Reduceskin" data-indextext="2">
					<text class="textcolorwrite font-size-forty">-</text>
				</button>
			</cover-view>
		</cover-view>
	</view>
	<!-- #endif -->
</template>

<script>
	// #ifdef APP-PLUS
	// import livecovetop from "@/components/Livecoverfengmian/livecovetop.nvue" 
	import livecovemidden from "@/components/Livecoverfengmian/livecovemidden.nvue"
	const app = getApp()
	export default {//这是直播的封面
		data() {
			return {
				windowWidth:0,//可使用屏幕的宽度
				windowHeight:0,//克数用屏幕的高度
				beauty:5,//美颜，取值范围 0-9（iOS取值范围为1） ，0 表示关闭
				whiteness:5,//	美白，取值范围 0-9（iOS取值范围为1） ，0 表示关闭。
				statusBarHeight:0,//拿到状态栏高度
				windowBottom:0,//距离底部的距离
				Backcoverurl:"",//这是传回来的图片
				Backinpvalue:"",//这是穿回来的value
				righticon:[
					{
						url:"/static/Pushflow/Skincare.png"
					}
					// {
					// 	url:"/static/Pushflow/Cameratransformation.png"
					// }
				],
				Skincare:false,
				// 临时变量
				indexlinshi:0,
				storeid:"",//为了获得店铺id
			}
		},
		methods: {
			dianji(e){
				e.stopPropagation()
			},
			cameraimgs(e){
				let indexs = e.currentTarget.dataset.index
				// console.log(indexs)
				if(indexs==0){//代表点击了美颜
					if(this.Skincare){
						this.Skincare = false
					}else{
						this.Skincare = true
					}
				}
			},
			covermodel(msgtitle,msgcotent){
				const _this = this
				uni.showModal({
					title:msgtitle,
					content:msgcotent,
					showCancel:true,
					cancelText:"稍后直播",
					cancelColor:"#f00",
					confirmText:"继续直播",
					confirmColor:"#0f0",
					success(res){
						if(res.confirm){
							//关闭摄像头预览
							_this.context.stopPreview()
							//开启推流
							// _this.context.start()
							// 后面添加参数的是临时的
							uni.redirectTo({
								url:`/pages/livestudio/livestudio?storeid=${_this.storeid}&index=${_this.indexlinshi}`
							})
						}
					}
				})
			},
			//封装一个执行上面的模态框的方法
			Detectionlive(_this){
				if(_this.Backcoverurl!=="" && _this.Backinpvalue!==""){//如果两个值不为空的情况下
					//关闭摄像头预览
					_this.context.stopPreview()
					//开启推流
					// _this.context.start()
					uni.redirectTo({
						// 后面添加参数的是临时的
						
						url:`/pages/livestudio/livestudio?storeid=${_this.storeid}&index=${_this.indexlinshi}`
					})
				}else if(_this.Backcoverurl==""){//如果图片的为空
					_this.covermodel('封面图片未选择',"为了让其他人更好的关注您,请设置封面图片")
				}else if(_this.Backinpvalue==""){//如果描述为空的情况下
					_this.covermodel("标题未填写","为了让其他人更好的关注您,请填写标题")
				}
			},
			//开始直播
			Begintolive(){
				const _this = this
				uni.getNetworkType({
					success(res) {
						if(res.networkType!=="wifi" && res.networkType!=="none"){//判断用户在不在wifi情况下 并且判断用户的网不在none的情况下
							uni.showModal({
								title:`您正在使用${res.networkType}网`,
								content:"确定要继续直播吗",
								showCancel:true,
								cancelText:"稍后直播",
								cancelColor:"#f00",
								confirmText:"继续直播",
								confirmColor:"#0f0",
								success(reslut) {
									if(reslut.confirm){//如果用户选择了继续播放 
										_this.Detectionlive(_this)
									}
								}
							})
						}else if(res.networkType=="none"){//如果是在美网的情况下
							app.globalData.showtoastsame("网络连接失败,请检查您的网络")
						}else{
							_this.Detectionlive(_this)
						}
					},
					fail(err){
						
					}
				})
				
			},
			//点击×的时候
			Shutdown(){
				uni.navigateBack()
			},
			//这是子组件穿回来的值
			coverurl(e){
				this.Backcoverurl = e
			},
			inpvalue(e){
				this.Backinpvalue = e
			},
			//增加美颜
			Increaseskin(e){
				let indexs = parseInt( e.currentTarget.dataset.indextext)
				if(indexs==1){//代表美颜
					this.beauty++
					if(this.beauty>=9){
						this.beauty = 9
						app.globalData.showtoastsame("美颜取值0~9,9代表最高美颜")
					}
				}else{//代表美白
					this.whiteness++
					if(this.whiteness>=9){
						this.whiteness = 9
						app.globalData.showtoastsame("美白取值0~9,9代表最高美白")
					}
				}
			},
			//减少美颜
			Reduceskin(e){
				let indexs = parseInt( e.currentTarget.dataset.indextext)
				if(indexs==1){//代表美颜
					this.beauty--
					if(this.beauty<=0){
						this.beauty = 0
						app.globalData.showtoastsame("美颜取值0~9,0代表无美颜")
					}
				}else{//代表美白
					this.whiteness--
					if(this.whiteness<=0){
						this.whiteness = 0
						app.globalData.showtoastsame("美白取值0~9,0代表无美白")
					}
				}
			}
		},
		created() {
			const _this = this
			uni.getSystemInfo({
				success(res) {
					_this.statusBarHeight = res.statusBarHeight
					_this.windowWidth = res.screenWidth
					_this.windowHeight = res.screenHeight
					_this.windowBottom = res.windowBottom
				}
			})
			// uni.getLocation({
			// 	success(res) {
			// 		// console.log(res)
			// 		 uni.openLocation({
			// 			 latitude:res.latitude,
			// 			 longitude:res.longitude,
			// 			 success(reslocationicon) {
			// 			 	console.log(reslocationicon)
			// 			 }
			// 		 })
			// 	}
			// })
		},
		onShow(){
			
		},
		onReady(){
			this.context = uni.createLivePusherContext("livePusher", this);
			// console.log(this.context)
			// console.log(this.context)
			//开启推流
			// this.context.start()
			//开启摄像头预览
			this.context.startPreview()
			//切换前后摄像头
			this.context.switchCamera()
		},
		components:{
			livecovemidden
		},
		onLoad(opction) {
			let {index,storeid} = opction
			this.storeid = storeid
			this.indexlinshi = index
		},
		
	}
	// #endif
</script>

<style>
	/* #ifdef APP-PLUS */
	.livecover{
		/* background-color:yellow; */
	}
	.coverfather{
		position: absolute;
		top:0;
		left:0;
		/* background-color:red; */
	}
	.livecovetop{
		/* height:30px; */
		/* background-color:red; */
		flex-direction: row;
		padding:0 40rpx;
	}
	.livecovetop-left{
		flex:1;
		flex-direction: row;
		/* background-color:pink; */
	}
	.livecovetop-right{
		width: 60rpx;
		/* background-color:yellow; */
	}
	.icon-imgs{
		width: 60rpx;
		height:60rpx;
	}
	.iconmargin{
		margin-right:40rpx;
	}
	.iconmargin:last-child{
		margin-right:0;
	}
	.livecover-bottom{
		position: absolute;
		bottom:0;
		left:0;
		/* width: 100px; */
		height:100px;
		/* background-color:red; */
		justify-content: center;
	}
	.location{
		flex-direction: row;
	}
	.locationicon{
		/* background-color:yellow; */
	}
	.locationicontext{
		margin:10rpx 0 0 10rpx;
	}
	.livecover-btn{
		height:110rpx;
		border-width:0;
	}
	.slider{
		align-items: center;
		position: absolute;
		width: 100rpx;
		/* height:60rpx; */
		/* background-color:red; */
		justify-content: center;
	}
	.slidertitletext{
		margin-bottom:10rpx;
	}
	.sliderbtn{
		width:80rpx;
		height:50rpx;
		border-width:0;
		border-radius: 20rpx;
	}
	.sliderinp{
		width: 100rpx;
		height:40rpx;
		border-color:#de4758;
		margin:15rpx 0;
		border-radius:20rpx;
	}
/* #endif */
</style>
